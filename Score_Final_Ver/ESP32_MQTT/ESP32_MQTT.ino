// #include <ESP8266WiFi.h>
// #include <PubSubClient.h>

// // Wi-Fi v√† MQTT server
// const char* ssid = "FreeWifi";
// const char* password = "12345678";
// const char* mqtt_server = "192.168.66.80";  // IP m√°y t√≠nh ch·∫°y Mosquitto

// #define Red_led D3
// #define Green_led D4

// WiFiClient espClient;
// PubSubClient client(espClient);

// // ===== K·∫øt n·ªëi WiFi =====
// void setup_wifi() {
//   Serial.print("Connecting to ");
//   Serial.println(ssid);
//   WiFi.begin(ssid, password);

//   while (WiFi.status() != WL_CONNECTED) {
//     delay(500);
//     Serial.print(".");
//   }

//   Serial.println("\n‚úÖ WiFi connected");
//   Serial.print("IP address: ");
//   Serial.println(WiFi.localIP());
// }

// // ===== H√†m x·ª≠ l√Ω khi nh·∫≠n tin nh·∫Øn MQTT =====
// void callback(char* topic, byte* payload, unsigned int length) {
//   String message;
//   for (int i = 0; i < length; i++) {
//     message += (char)payload[i];
//   }

//   Serial.print("üì© Nh·∫≠n tin nh·∫Øn t·ª´ topic [");
//   Serial.print(topic);
//   Serial.print("]: ");
//   Serial.println(message);

//   if (message.indexOf(':') != -1) {
//     Serial.println("üîî Ph√°t hi·ªán d·∫•u ':' ‚Üí b·∫≠t D2");
//     delay(1000);  // gi·ªØ 1 gi√¢y
//     digitalWrite(Red_led, LOW);
//     digitalWrite(Green_led, HIGH);
//   }
// }

// // ===== K·∫øt n·ªëi MQTT v√† g·ª≠i message =====
// void reconnect() {
//   while (!client.connected()) {
//     Serial.print("Attempting MQTT connection...");
//     if (client.connect("ESP8266Client")) {
//       Serial.println("connected");

//       // G·ª≠i l·ªánh "score"
//       client.publish("esp8266/score", "score");
//       Serial.println("‚úÖ G·ª≠i l·ªánh: score");

//       // ƒêƒÉng k√Ω nh·∫≠n ph·∫£n h·ªìi
//       client.subscribe("Score/finish");
//       Serial.println("üì° ƒêƒÉng k√Ω nh·∫≠n ph·∫£n h·ªìi t·∫°i topic: esp8266/response");

//       digitalWrite(Red_led, HIGH);
//       digitalWrite(Green_led, LOW);
//     } else {
//       Serial.print("‚ùå K·∫øt n·ªëi th·∫•t b·∫°i, m√£ l·ªói = ");
//       Serial.print(client.state());
//       Serial.println(" ‚Üí th·ª≠ l·∫°i sau 1 gi√¢y");
//       delay(1000);
//     }
//   }
// }

// // ===== Setup ban ƒë·∫ßu =====
// void setup() {
//   Serial.begin(115200);
//   pinMode(Red_led, OUTPUT);
//   pinMode(Green_led, OUTPUT);

//   digitalWrite(Red_led, LOW);
//   digitalWrite(Green_led, HIGH);

//   setup_wifi();
//   client.setServer(mqtt_server, 1883);
//   client.setCallback(callback);  // ‚ö†Ô∏è ƒêƒÉng k√Ω h√†m nh·∫≠n message
// }

// // ===== V√≤ng l·∫∑p ch√≠nh =====
// void loop() {
//   if (!client.connected()) {
//     reconnect();
//   }
//   client.loop();
// }





#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Wi-Fi v√† MQTT server
const char* ssid = "FreeWifi";
const char* password = "12345678";
const char* mqtt_server = "192.168.66.80";  // IP m√°y t√≠nh ch·∫°y Mosquitto

#define Red_led D3
#define Green_led D4
#define Button_pin D5

WiFiClient espClient;
PubSubClient client(espClient);

// C·ªù b√°o hi·ªáu n√∫t ƒë∆∞·ª£c nh·∫•n (volatile ƒë·ªÉ d√πng trong ISR v√† loop)
volatile bool buttonPressedFlag = false;
// Bi·∫øn ƒë·ªÉ debounce trong ISR
volatile unsigned long lastInterruptTime = 0;
const unsigned long debounceDelay = 300; // 50ms debounce

// ===== K·∫øt n·ªëi WiFi =====
void setup_wifi() {
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\n‚úÖ WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

// ===== H√†m x·ª≠ l√Ω khi nh·∫≠n tin nh·∫Øn MQTT =====
void callback(char* topic, byte* payload, unsigned int length) {
  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  Serial.print("üì© Nh·∫≠n tin nh·∫Øn t·ª´ topic [");
  Serial.print(topic);
  Serial.print("]: ");
  Serial.println(message);

  if (message.indexOf(':') != -1) {
    Serial.println("üîî Ph√°t hi·ªán d·∫•u ':' ‚Üí b·∫≠t Green_led");
    digitalWrite(Red_led, LOW);
    digitalWrite(Green_led, HIGH);
    delay(1000);  // Gi·ªØ trong 1 gi√¢y
  }
}

// ===== K·∫øt n·ªëi MQTT v√† subscribe =====
void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
      // Subscribe v√†o topic ƒë·ªÉ nh·∫≠n ph·∫£n h·ªìi
      client.subscribe("Score/finish");
      Serial.println("üì° Subscribed to: Score/finish");
    } else {
      Serial.print("‚ùå K·∫øt n·ªëi th·∫•t b·∫°i, m√£ l·ªói = ");
      Serial.print(client.state());
      Serial.println(" ‚Üí Th·ª≠ l·∫°i sau 1 gi√¢y");
      delay(1000);
    }
  }
}

// ===== ISR x·ª≠ l√Ω ng·∫Øt n√∫t nh·∫•n =====
void IRAM_ATTR handleButtonInterrupt() {
  unsigned long interruptTime = millis();
  // Debounce: ch·ªâ x·ª≠ l√Ω n·∫øu kho·∫£ng c√°ch gi·ªØa 2 ng·∫Øt l·ªõn h∆°n debounceDelay
  if (interruptTime - lastInterruptTime > debounceDelay) {
    buttonPressedFlag = true;
  }
  lastInterruptTime = interruptTime;
}

// ===== Setup ban ƒë·∫ßu =====
void setup() {
  Serial.begin(115200);

  pinMode(Red_led, OUTPUT);
  pinMode(Green_led, OUTPUT);
  pinMode(Button_pin, INPUT_PULLUP);  // S·ª≠ d·ª•ng pull-up n·ªôi b·ªô cho n√∫t

  digitalWrite(Red_led, LOW);
  digitalWrite(Green_led, HIGH);

  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  // Thi·∫øt l·∫≠p ng·∫Øt cho n√∫t nh·∫•n: k√≠ch ho·∫°t khi t√≠n hi·ªáu r∆°i (FALLING)
  attachInterrupt(digitalPinToInterrupt(Button_pin), handleButtonInterrupt, FALLING);
}

// ===== V√≤ng l·∫∑p ch√≠nh =====
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Ki·ªÉm tra c·ªù n√∫t ƒë∆∞·ª£c nh·∫•n b·ªüi ISR
  if (buttonPressedFlag) {
    // Reset c·ªù tr∆∞·ªõc khi x·ª≠ l√Ω
    buttonPressedFlag = false;
    Serial.println("üñ≤Ô∏è Button nh·∫•n ‚Üí g·ª≠i l·ªánh score");
    client.publish("esp8266/score", "score");
    digitalWrite(Red_led, HIGH);
    digitalWrite(Green_led, LOW);
  }
}
